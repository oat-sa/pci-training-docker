{"version":3,"names":["define","defaultProperties","prompt","submit","output","name","formatOutput","message","replaceAll","getProperties","properties","Object","assign","hb","template","Handlebars","depth0","helpers","partials","data","compilerInfo","merge","stack1","helper","options","buffer","helperMissing","escapeExpression","__","hash","call","stateFactory","Question","formElement","simpleEditor","propHelper","formTpl","stateQuestion","extend","widget","$container","element","interaction","pci","metaData","pciMarkup","$original","find","get","create","value","renderer","getRenderer","setMessage","prop","classList","add","triggerPci","destroy","remove","prototype","initForm","$form","props","html","initWidget","setChangeCallbacks","i","setPrompt","renderInput","factory","states","QuestionState","createBundle","Widget","interactionWidget","clone","initCreator","registerStates","markupTpl","getTypeIdentifier","getWidget","getDefaultProperties","afterCreate","getMarkupTemplate","getMarkupData","defaultData","serial","Date","now","IMSPCI"],"sources":["../build/config-wrap-start-default.js","../../../myPCI/views/js/pciCreator/ims/simplePCI/runtime/helper/properties.js","../../../myPCI/views/js/pciCreator/ims/simplePCI/creator/tpl/propertiesForm!tpl","../../../myPCI/views/js/pciCreator/ims/simplePCI/creator/widget/states/Question.js","../../../myPCI/views/js/pciCreator/ims/simplePCI/creator/widget/states/states.js","../../../myPCI/views/js/pciCreator/ims/simplePCI/creator/widget/Widget.js","../../../myPCI/views/js/pciCreator/ims/simplePCI/creator/tpl/markup!tpl","../../../myPCI/views/js/pciCreator/ims/simplePCI/imsPciCreator.js","../build/config-wrap-end-default.js"],"sourcesContent":["\n","define('simplePCI/runtime/helper/properties',[], function () {\n    const defaultProperties = {\n        prompt: 'Please enter your name:',\n        submit: 'OK',\n        output: 'Hello dear {name}! How is your day?',\n        name: '{name}'\n    };\n\n    return {\n        formatOutput(message, name) {\n            return message.replaceAll('{name}', name);\n        },\n\n        getProperties(properties) {\n            return Object.assign({}, defaultProperties, properties);\n        }\n    };\n});\n\n","\ndefine('tpl!simplePCI/creator/tpl/propertiesForm', ['handlebars'], function(hb){ return hb.template(function (Handlebars,depth0,helpers,partials,data) {\n  this.compilerInfo = [4,'>= 1.0.0'];\nhelpers = this.merge(helpers, Handlebars.helpers); data = data || {};\n  var buffer = \"\", stack1, helper, options, helperMissing=helpers.helperMissing, escapeExpression=this.escapeExpression, functionType=\"function\";\n\n\n  buffer += \"<div class=\\\"panel\\\">\\n    <label>\\n        <span>Submit</span>\\n        <span class=\\\"icon-help tooltipstered\\\" data-tooltip=\\\"~ .tooltip-content:first\\\" data-tooltip-theme=\\\"info\\\"></span>\\n        <span class=\\\"tooltip-content\\\">\"\n    + escapeExpression((helper = helpers.__ || (depth0 && depth0.__),options={hash:{},data:data},helper ? helper.call(depth0, \"The caption of the submit button\", options) : helperMissing.call(depth0, \"__\", \"The caption of the submit button\", options)))\n    + \"</span>\\n        <input type=\\\"text\\\" name=\\\"submit\\\" value=\\\"\";\n  if (helper = helpers.submit) { stack1 = helper.call(depth0, {hash:{},data:data}); }\n  else { helper = (depth0 && depth0.submit); stack1 = typeof helper === functionType ? helper.call(depth0, {hash:{},data:data}) : helper; }\n  buffer += escapeExpression(stack1)\n    + \"\\\">\\n    </label>\\n    <label>\\n        <span>Prompt</span>\\n        <span class=\\\"icon-help tooltipstered\\\" data-tooltip=\\\"~ .tooltip-content:first\\\" data-tooltip-theme=\\\"info\\\"></span>\\n        <span class=\\\"tooltip-content\\\">\"\n    + escapeExpression((helper = helpers.__ || (depth0 && depth0.__),options={hash:{},data:data},helper ? helper.call(depth0, \"The text of the prompt message asking the user for its name\", options) : helperMissing.call(depth0, \"__\", \"The text of the prompt message asking the user for its name\", options)))\n    + \"</span>\\n        <textarea name=\\\"prompt\\\">\";\n  if (helper = helpers.prompt) { stack1 = helper.call(depth0, {hash:{},data:data}); }\n  else { helper = (depth0 && depth0.prompt); stack1 = typeof helper === functionType ? helper.call(depth0, {hash:{},data:data}) : helper; }\n  buffer += escapeExpression(stack1)\n    + \"</textarea>\\n    </label>\\n</panel>\";\n  return buffer;\n  }); });\n","define('simplePCI/creator/widget/states/Question',[\n    'taoQtiItem/qtiCreator/widgets/states/factory',\n    'taoQtiItem/qtiCreator/widgets/interactions/states/Question',\n    'taoQtiItem/qtiCreator/widgets/helpers/formElement',\n    'taoQtiItem/qtiCreator/editor/simpleContentEditableElement',\n    'simplePCI/runtime/helper/properties',\n    'tpl!simplePCI/creator/tpl/propertiesForm'\n], function (stateFactory, Question, formElement, simpleEditor, propHelper, formTpl) {\n    'use strict';\n\n    var stateQuestion = stateFactory.extend(\n        Question,\n        function enterQuestionState() {\n            const { widget } = this;\n            const { $container, element: interaction } = widget;\n            const { pci } = interaction.metaData;\n            const pciMarkup = widget.$original.find('.simple_pci').get(0);\n\n            simpleEditor.create($container, '.simple-pci-message', value => {\n                const renderer = pci.getRenderer();\n                renderer.setMessage(value);\n                interaction.prop('message', value);\n            });\n\n            // notify the runtime renderer that we entered the authoring mode\n            pciMarkup.classList.add('authoring');\n            // pciMarkup.dispatchEvent(new CustomEvent('enteringcreator'));\n            interaction.triggerPci('enteringcreator');\n        },\n        function leaveQuestionState() {\n            const { widget } = this;\n            const { $container, element: interaction } = widget;\n            const pciMarkup = widget.$original.find('.simple_pci').get(0);\n\n            simpleEditor.destroy($container);\n\n            // notify the runtime renderer that we exited the authoring mode\n            pciMarkup.classList.remove('authoring');\n            // pciMarkup.dispatchEvent(new CustomEvent('leavingcreator'));\n            interaction.triggerPci('leavingcreator');\n        }\n    );\n\n    /**\n     * Setup the property panel\n     */\n    stateQuestion.prototype.initForm = function () {\n        const { widget } = this;\n        const { element: interaction } = widget;\n        const { pci } = interaction.metaData;\n        const $form = this.widget.$form;\n\n        const props = propHelper.getProperties(interaction.properties);\n        let { submit, prompt } = props;\n\n        //render the form using the form template\n        this.widget.$form.html(\n            formTpl({\n                submit,\n                prompt\n            })\n        );\n\n        //init form javascript\n        formElement.initWidget(this.widget.$form);\n\n        //init data change callbacks\n        formElement.setChangeCallbacks($form, interaction, {\n            //example\n            // propertyName: function(i, value){\n            //    i.properties[propertyName] = value;\n            // }\n            submit(i, value) {\n                i.prop('submit', value);\n\n                // modify the rendering using an event\n                interaction.triggerPci('setsubmit', [value]);\n            },\n            prompt(i, value) {\n                i.prop('prompt', value);\n\n                // modify the rendering through the renderer\n                const renderer = pci.getRenderer();\n                renderer.setPrompt(value);\n                renderer.renderInput();\n            }\n        });\n    };\n    return stateQuestion;\n});\n\n","define('simplePCI/creator/widget/states/states',[\n    'taoQtiItem/qtiCreator/widgets/states/factory',\n    'taoQtiItem/qtiCreator/widgets/interactions/customInteraction/states/states',\n    'simplePCI/creator/widget/states/Question'\n], function (factory, states, QuestionState) {\n    'use strict';\n    return factory.createBundle(states, [QuestionState], ['answer', 'correct', 'map']);\n});\n\n","define('simplePCI/creator/widget/Widget',[\n    'taoQtiItem/qtiCreator/widgets/interactions/customInteraction/Widget',\n    'simplePCI/creator/widget/states/states',\n], function (Widget, states) {\n    'use strict';\n\n    const interactionWidget = Widget.clone();\n\n    interactionWidget.initCreator = function () {\n        this.registerStates(states);\n        Widget.initCreator.call(this);\n    };\n\n    return interactionWidget;\n});\n\n","\ndefine('tpl!simplePCI/creator/tpl/markup', ['handlebars'], function(hb){ return hb.template(function (Handlebars,depth0,helpers,partials,data) {\n  this.compilerInfo = [4,'>= 1.0.0'];\nhelpers = this.merge(helpers, Handlebars.helpers); data = data || {};\n  \n\n\n  return \"<div class=\\\"simple_pci\\\" data-serial=\\\"${templateData.serial}\\\"></div>\";\n  }); });\n","define('simplePCI/imsPciCreator',['simplePCI/creator/widget/Widget', 'tpl!simplePCI/creator/tpl/markup'], function (Widget, markupTpl) {\n    'use strict';\n\n    const typeIdentifier = 'simplePCI';\n\n    return {\n        /**\n         * (required) Get the typeIdentifier of the custom interaction\n         *\n         * @returns {String}\n         */\n        getTypeIdentifier() {\n            return typeIdentifier;\n        },\n\n        /**\n         * (required) Get the widget prototype\n         * Used in the renderer\n         *\n         * @returns {Object} Widget\n         */\n        getWidget() {\n            return Widget;\n        },\n\n        /**\n         * (optional) Get the default properties values of the pci.\n         * Used on new pci instance creation\n         *\n         * @returns {Object}\n         */\n        getDefaultProperties() {\n            return {\n                prompt: 'Please enter your name:',\n                submit: 'OK',\n                output: 'Hello dear {name}! How is your day?'\n            };\n        },\n\n        /**\n         * (optional) Callback to execute on the\n         * new pci instance creation\n         *\n         * @returns {Object}\n         */\n        afterCreate() {},\n\n        /**\n         * (required) Gives the qti pci markup template\n         *\n         * @returns {function} template function\n         */\n        getMarkupTemplate() {\n            return markupTpl;\n        },\n\n        /**\n         * (optional) Allows passing additional data to xml template (see templateData)\n         *\n         * @returns {Object} template data\n         */\n        getMarkupData(pci, defaultData) {\n            return Object.assign(\n                {\n                    serial: Date.now()\n                },\n                defaultData\n            );\n        }\n    };\n});\n\n","define(['simplePCI/imsPciCreator'],function(IMSPCI){return IMSPCI});\n"],"mappings":"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"}